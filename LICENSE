1.	Una lista dinámica donde el apuntador al primer elemento de la lista, se llamará “Profesores”. Cada uno de los elementos de la lista almacena la cédula, los apellidos, los nombres y la cantidad de clases que tiene asignadas cada profesor.
Un ejemplo de cada elemento de la lista sería.

2.	Cada profesor tendrá asociada una lista de arreglos llamada cortes de notas donde cada elemento de la lista apunta a un arreglo que contiene las notas del corte correspondiente, es decir, si hay tres cortes, la lista tendrá 3 elementos cada uno apuntando a un arreglo diferente.  Cada una de las posiciones del arreglo tiene tres campos, el primero de ellos corresponde al tipo de evaluación (quiz, taller, parcial, proyecto, exposición etc), el segundo al porcentaje total de dicha evaluación y el tercero tiene asociada una o varias listas de parejas. El primer valor de la pareja indica el porcentaje de cada punto del parcial, quiz o taller y el segundo valor indica el código del tema evaluado. Es decir, el número de elementos del arreglo es igual al número de tipos de evaluación para cada corte y por cada punto en el parcial o en el quiz habrá un elemento en la lista. 

3.	Una lista llamada temas, en la cual cada elemento está compuesto por dos campos: el código del tema y su respectivo nombre. Ejemplo de la lista:

4.	Un arreglo llamado Clases, donde el número de elementos del arreglo se corresponde con el número de profesores de la asignatura (cada posición tiene la cédula del profesor y un apuntador al arreglo). A su vez, cada profesor tiene asociado arreglo de tamaño igual al número de cursos que tiene a su cargo (dato que se puede consultar en la lista profesores), en cada posición de dicho arreglo se tiene el código de la clase dictada por el profesor y un apuntador a una lista ordenada con el nombre de los archivos que envió el profesor(el primer nombre corresponde al primer parcial, el segundo al segundo y así sucesivamente) con el consolidado de sus notas (El número de elementos de la lista  corresponde a la cantidad de parciales que hubo en el semestre) Ejemplo:


REQUERIMIENTOS FUNCIONALES.

Elabore un programa donde:
1.	Se creen las estructuras aquí mencionadas, que el director del área requiere. 
2.	Se desarrollen herramientas para  que el Jefe de sección pueda llenar estas estructuras
3.	Se almacenen las estructuras en archivos, de forma que cuando se termine de trabajar con ellas, la información allí contenida no se pierda y que la próxima ocasión que se utilice el programa, las estructuras aparezcan ya llenas con la información que recuperan de dichos archivos.
4.	Se generen archivos donde se consolida la información para cada uno de los parciales hechos en el semestre. El nombre de los archivos generados debe ser ParcialXX.bin, donde xx debe ser reemplazado por el número del parcial. En cada archivo deberá ir el número de la pregunta y la nota promedio de todos los estudiantes inscritos.
5.	Se cree un archivo llamado refuerzo.txt, ordenado ascendentemente por el campo nota donde se puede visualizar en qué temas hay que hacer refuerzo para el próximo semestre (consolidado de todos los cursos durante todo el semestre para todos los parciales). Ejemplo:
6.	Se permita al director de área, consultar: 
a.	El promedio de un estudiante perteneciente a un curso específico identificando además el comportamiento en los diferentes temas por parte de dicho estudiante.
b.	El comportamiento promedio de los estudiantes pertenecientes a un curso dado, en los diferentes temas.
c.	El comportamiento promedio (clasificado por temas) de todos los estudiantes que toman clase con el mismo profesor.
d.	La lista (ordenada por cédula) de los profesores que tienen un número de clases dado (por consola).
e.	Lista de los estudiantes (pertenecientes a cualquiera de los cursos) que tienen nota superior a una nota dada, en las preguntas de un tema determinado por el usuario.
7.	Se permitirá al profesor modificar el esquema definido para cada uno de los cortes de notas, siempre y cuando la evaluación que quiera modificar, no se halla llevado a cabo aún.
8.	 Las funciones deben poderse utilizar sin importar el número de profesores, parciales.
 quices, talleres, puntos, temas, etc. Es decir, no se debe crear el programa solo para los ejemplos dados.
9.	EL programa contará con los menús y submenús que faciliten la realización de cada una de las consultas.
10.	Se debe aplicar programación orientada a objetos y el principio de alta cohesión y bajo acoplamiento.
11.	 Se deben aplicar los conceptos de optimización estudiados en el curso. No limitarse a garantizar el funcionamiento del programa, sin embargo, se podrá usar información redundante (repetida) sólo en los casos que sea estrictamente necesario y que tengan soporte argumentativo que demuestre una mejora sustancial, en términos de comportamiento de los algoritmos.
